# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sGA9HL0fo-P90ms-VR8TJvRe4ip3Ruth
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# ------------------------------
# Streamlit App Layout
# ------------------------------
st.set_page_config(page_title="🎧 MoodFM:Mental Health Music Recommender", layout="wide")
st.title("🎧 MoodFM:Mental Health Music Recommender")

st.markdown("""
Welcome! This app recommends music genres and real-world songs based on your mental health condition and severity level.

Just select your condition below to explore trends and get tailored music suggestions 🎶
""")

# ------------------------------
# Load and preprocess data
# ------------------------------
@st.cache_data
def load_data():
    df = pd.read_csv("MentaLHealthMusicRecCleaned.csv")
    songs = pd.read_csv("genre_songs.csv")
    return df, songs

df, song_df = load_data()

# Genre frequency columns
genre_cols = [col for col in df.columns if col.startswith("Frequency [")]

# Convert genre frequencies to numeric
for col in genre_cols:
    df[col] = df[col].replace({
        'Never': 0,
        'Rarely': 1,
        'Sometimes': 2,
        'Very frequently': 3
    })

# ------------------------------
# Classify severity of conditions
# ------------------------------
def classify_severity(score):
    if score == 0:
        return 'None'
    elif 1 <= score <= 3:
        return 'Mild'
    elif 4 <= score <= 6:
        return 'Moderate'
    else:
        return 'Severe'

# Apply classification
mental_cols = ['Anxiety', 'Depression', 'Insomnia', 'Ocd']
for col in mental_cols:
    df[col + '_level'] = df[col].apply(classify_severity)


# Sidebar Inputs
st.sidebar.header("🧠 Select Your State")
condition = st.sidebar.selectbox("Mental Health Condition", mental_cols)
severity = st.sidebar.selectbox("Severity Level", ['None', 'Mild', 'Moderate', 'Severe'])

# ------------------------------
# Recommendation Logic
# ------------------------------
def recommend_genres(df, condition, severity, top_n=3):
    level_col = condition + "_level"
    filtered = df[df[level_col] == severity]
    genre_avgs = filtered[genre_cols].mean().sort_values(ascending=False)
    top_genres = genre_avgs.head(top_n).index.tolist()


    return [g.replace("Frequency [", "").replace("]", "") for g in top_genres]

recommended_genres = recommend_genres(df, condition, severity)

# ------------------------------
# Visualization
# ------------------------------
def plot_preferences(df, condition, severity):
    level_col = condition + '_level'
    data = df[df[level_col] == severity]
    means = data[genre_cols].mean().sort_values()

    fig, ax = plt.subplots(figsize=(10, 6))
    sns.barplot(x=means.values, y=means.index.str.replace("Frequency [", "").str.replace("]", ""), palette="mako", ax=ax)
    ax.set_title(f"🎼 Average Genre Preferences for {condition} ({severity})")
    ax.set_xlabel("Average Listening Frequency")
    ax.set_ylabel("Genre")
    st.pyplot(fig)

# ------------------------------
# Output
# ------------------------------
st.subheader(f"📊 Genre Preference Analysis: {condition} ({severity})")
plot_preferences(df, condition, severity)

st.subheader("🎼 Recommended Genres & Example Songs")

for genre in recommended_genres:
    st.markdown(f"### 🎵 {genre}")
    examples = song_df[song_df["Genre"].str.lower() == genre.lower()]["Example Song"].tolist()
    if examples:
        for song in examples:
            st.markdown(f"- 🎶 {song}")
    else:
        st.markdown("_No examples available._")

# Footer
st.markdown("---")
st.markdown("Made with ❤️ using Streamlit | Based on real survey data")

